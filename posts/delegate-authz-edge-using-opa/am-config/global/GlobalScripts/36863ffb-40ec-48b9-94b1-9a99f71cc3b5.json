{
  "metadata" : {
    "realm" : null,
    "amsterVersion" : "7.1.0",
    "entityType" : "GlobalScripts",
    "entityId" : "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "pathParams" : { }
  },
  "data" : {
    "_id" : "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "script" : "",
    "lastModifiedBy" : "null",
    "lastModifiedDate" : "0",
    "language" : "GROOVY",
    "name" : "OIDC Claims Script",
    "context" : "OIDC_CLAIMS",
    "createdBy" : "null",
    "creationDate" : "0",
    "description" : "Default global script for OIDC claims",
    "_type" : {
      "_id" : "globalScript",
      "name" : "Scripting",
      "collection" : true
    }
  }
}